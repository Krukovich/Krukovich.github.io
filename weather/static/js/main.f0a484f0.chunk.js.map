{"version":3,"sources":["components/Weather.jsx","components/BurgerMenu.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","state","temp","tempMax","tempMin","name","pressure","wind","description","id","url","fetch","response","json","data","this","setState","list","main","temp_max","temp_min","speed","weather","inputVal","document","getElementById","value","cityId","require","forEach","item","getData","alert","Card","style","width","className","Body","Title","ListGroup","ListGroupItem","type","Button","variant","onClick","startApp","bind","Component","BurgerMenu","event","preventDefault","right","pageWrapId","outerContainerId","href","showSettings","React","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6pvqkBAmFeA,E,YA1EX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,KAAM,GACNC,QAAS,GACTC,QAAS,GACTC,KAAM,GACNC,SAAU,GACVC,KAAM,GACNC,YAAa,IATF,E,6GAaLC,G,iFAENC,EAAM,mDADGD,EAC2D,uD,SACnDE,MAAMD,G,cAAvBE,E,gBACaA,EAASC,O,OAAtBC,E,OACJC,KAAKC,SAAS,CACVd,KAAMY,EAAKG,KAAK,GAAGC,KAAKhB,KACxBC,QAASW,EAAKG,KAAK,GAAGC,KAAKC,SAC3Bf,QAASU,EAAKG,KAAK,GAAGC,KAAKE,SAC3Bf,KAAMS,EAAKG,KAAK,GAAGZ,KACnBC,SAAUQ,EAAKG,KAAK,GAAGC,KAAKZ,SAC5BC,KAAMO,EAAKG,KAAK,GAAGV,KAAKc,MACxBb,YAAaM,EAAKG,KAAK,GAAGK,QAAQ,GAAGd,c,sIAKzC,IAAIe,EAAWC,SAASC,eAAe,YAAYC,MAC/CC,EAAS,GACb,GAAIJ,EAAU,CACV,IAAIV,EAAOe,EAAQ,IACff,GACAA,EAAKgB,QAAQ,SAAAC,GACLA,EAAKzB,OAASkB,IACdI,EAASG,EAAKrB,MAGtBM,KAAKgB,QAAQJ,IAEbK,MAAM,+FAGVA,MAAM,+E,+BAKV,OACI,6BACI,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,SAAWC,UAAU,WAC3C,kBAACH,EAAA,EAAKI,KAAN,KACI,kBAACJ,EAAA,EAAKK,MAAN,+FAA8BvB,KAAKd,MAAMI,OAEzC,kBAACkC,EAAA,EAAD,CAAWH,UAAU,oBACjB,kBAACI,EAAA,EAAD,4EAA6BzB,KAAKd,MAAMC,MACxC,kBAACsC,EAAA,EAAD,qJAA0CzB,KAAKd,MAAME,SACrD,kBAACqC,EAAA,EAAD,+IAAyCzB,KAAKd,MAAMG,SACpD,kBAACoC,EAAA,EAAD,0DAA0BzB,KAAKd,MAAMK,UACrC,kBAACkC,EAAA,EAAD,yFAAgCzB,KAAKd,MAAMM,QAGnD,2BAAOkC,KAAK,OAAOhC,GAAG,aACtB,6BACA,6BACA,kBAACiC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS7B,KAAK8B,SAASC,KAAK/B,OAAtD,kF,GApEMgC,a,QCgBPC,G,2LAnBGC,GACZA,EAAMC,mB,+BAIN,OACE,yBAAKzC,GAAG,mBACN,kBAAC,SAAD,CAAM0C,OAAK,EAACC,WAAa,YAAcC,iBAAmB,mBACxD,0BAAM5C,GAAG,cACP,uBAAGA,GAAG,OAAO2B,UAAU,YAAYkB,KAAK,KAAxC,6EACA,uBAAG7C,GAAG,QAAQ2B,UAAU,YAAYkB,KAAK,UAAzC,SACA,uBAAG7C,GAAG,UAAU2B,UAAU,YAAYkB,KAAK,YAA3C,WACA,uBAAGV,QAAU7B,KAAKwC,aAAenB,UAAU,mBAAmBkB,KAAK,IAAnE,kB,GAbWE,IAAMT,Y,MCUhBU,MATf,WACE,OACE,yBAAKrB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASxC,SAASC,eAAe,SD0H3C,kBAAmBwC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f0a484f0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport { Button } from 'react-bootstrap';\r\nimport { ListGroupItem } from 'react-bootstrap';\r\nimport { ListGroup } from 'react-bootstrap';\r\nimport { InputGroup } from 'react-bootstrap';\r\nimport { FormControl } from 'react-bootstrap';\r\n\r\nclass Weather extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            temp: \"\",\r\n            tempMax: \"\",\r\n            tempMin: \"\",\r\n            name: \"\",\r\n            pressure: \"\",\r\n            wind: \"\",\r\n            description: \"\"\r\n        };\r\n      }\r\n    \r\n    async getData(id) {\r\n        let cityId = id;\r\n        let url = \"http://api.openweathermap.org/data/2.5/group?id=\" + cityId + \"&units=metric&APPID=216ac8952d174875f2b0182d8ff16394\";\r\n        let response = await fetch(url);\r\n        let data = await response.json();\r\n        this.setState({\r\n            temp: data.list[0].main.temp,\r\n            tempMax: data.list[0].main.temp_max,\r\n            tempMin: data.list[0].main.temp_min,\r\n            name: data.list[0].name,\r\n            pressure: data.list[0].main.pressure,\r\n            wind: data.list[0].wind.speed,\r\n            description: data.list[0].weather[0].description\r\n        });\r\n    }\r\n\r\n    startApp() {\r\n        let inputVal = document.getElementById(\"cityName\").value;\r\n        let cityId = '';\r\n        if (inputVal) {\r\n            var json = require('./city.json');\r\n            if (json) {\r\n                json.forEach(item => {\r\n                    if (item.name === inputVal){\r\n                        cityId = item.id;\r\n                    }\r\n                });\r\n                this.getData(cityId);\r\n            } else {\r\n                alert(\"Данные не пришли\");\r\n            }\r\n        } else {\r\n            alert(\"Введите город\");\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <Card style={{ width: '18rem' }} className=\"weather\">\r\n                <Card.Body>\r\n                    <Card.Title>Выбранный город: {this.state.name}</Card.Title>\r\n                </Card.Body>\r\n                    <ListGroup className=\"list-group-flush\">\r\n                        <ListGroupItem>Температура: {this.state.temp}</ListGroupItem>\r\n                        <ListGroupItem>Температура максимальная: {this.state.tempMax}</ListGroupItem>\r\n                        <ListGroupItem>Температура минимальная: {this.state.tempMin}</ListGroupItem>\r\n                        <ListGroupItem>Давление: {this.state.pressure}</ListGroupItem>\r\n                        <ListGroupItem>Скорость ветра: {this.state.wind}</ListGroupItem>\r\n                    </ListGroup>\r\n                </Card>\r\n                <input type=\"text\" id=\"cityName\"></input>\r\n                <br/>\r\n                <br/>\r\n                <Button variant=\"primary\" onClick={this.startApp.bind(this)}>Узнать погоду</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Weather; ","import React, { Component } from 'react';\r\nimport { bubble as Menu } from 'react-burger-menu'\r\nimport \"../css/menu.css\";\r\n\r\nclass BurgerMenu extends React.Component {\r\n    showSettings (event) {\r\n      event.preventDefault();\r\n    }\r\n  \r\n    render () {\r\n      return (\r\n        <div id=\"outer-container\">\r\n          <Menu right pageWrapId={ \"page-wrap\" } outerContainerId={ \"outer-container\" }>\r\n            <main id=\"page-wrap\" />\r\n              <a id=\"home\" className=\"menu-item\" href=\"/\">Выбрать город</a>\r\n              <a id=\"about\" className=\"menu-item\" href=\"/about\">About</a>\r\n              <a id=\"contact\" className=\"menu-item\" href=\"/contact\">Contact</a>\r\n              <a onClick={ this.showSettings } className=\"menu-item--small\" href=\"\">Settings</a>\r\n          </Menu>\r\n        </div>  \r\n      );\r\n    }\r\n  }\r\n\r\nexport default BurgerMenu;","import React from 'react';\nimport Weather from \"./components/Weather\";\nimport BurgerMenu from \"./components/BurgerMenu\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BurgerMenu />\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}